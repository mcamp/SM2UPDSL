grammar dk.sdu.mmmi.assa.sm.StateMachine with org.eclipse.xtext.common.Terminals

generate stateMachine "http://www.sdu.dk/mmmi/assa/sm/StateMachine"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Root:
	(
		'project' name=ID
		vars+=VarDefinition*
		machines+=Machine*
	)?;
	
Machine:
	'machine' name=ID 
		('safety' 'properties' '{' properties+=SafetyProperty* '}')? 
		'{' (vars+=VarDefinition | states+=State | transitions+=Transition)* '}';
	
State:
	(fail?='fail' | end?='end')? 'state' name=ID ('safety' 'properties' '{' properties+=SafetyProperty* '}')? ('with' machine=Machine)?
;

Transition:
	from=[State] '->' to=[State]
		(hasGuard?='guard' guard=Expression)?
		(hasWhen?='when' when=ID)?
		(time?='after' timeout=Float)?
		(hasSignal?='signal' signal=ID)?
		('actions' '{' actions+=Statement* '}')?
;

SafetyProperty: 
	{Delay} 'startup' 'delay' time=TimeOrRange ('{' statements+=Statement* '}')?|
	{MaxExecutionTime} 'max' 'execution' time=Float
;

TimeOrRange:
	{Time} value = INT |
	{Range} 'from' from=INT 'to' to=INT
;

VarDefinition: 
	type=Type name=ID ':=' expression=Expression
;

Statement:
	{VarAssignation} variable=[VarDefinition] ':=' expression=Expression
;

Expression:
	Equality
;

Equality returns Expression:
	BoolExp ({Equality.left = current} op=('<'| '<=' | '>' | '>=' | '==') right=BoolExp)*
;

BoolExp returns Expression:
	Primary ({BoolExp.left = current} op=('||' | '&&') right=Primary)*
;


Primary returns Expression:
	{SMNumber} value=INT |
	{SMBool} value=Boolean |
	{VarReference} variable=[VarDefinition] |
	{Negation} '!' exp=Primary |
	'(' Expression ')'
;

Type: 'bool';

Float returns ecore::EFloat: INT ('.' INT)?;
Boolean returns ecore::EBoolean: 'true' | 'false';
