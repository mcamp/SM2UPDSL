/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.assa.sm.stateMachine.impl;

import dk.sdu.mmmi.assa.sm.stateMachine.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class StateMachineFactoryImpl extends EFactoryImpl implements StateMachineFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static StateMachineFactory init()
  {
    try
    {
      StateMachineFactory theStateMachineFactory = (StateMachineFactory)EPackage.Registry.INSTANCE.getEFactory(StateMachinePackage.eNS_URI);
      if (theStateMachineFactory != null)
      {
        return theStateMachineFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new StateMachineFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StateMachineFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case StateMachinePackage.ROOT: return createRoot();
      case StateMachinePackage.MACHINE: return createMachine();
      case StateMachinePackage.STATE: return createState();
      case StateMachinePackage.TRANSITION: return createTransition();
      case StateMachinePackage.SAFETY_PROPERTY: return createSafetyProperty();
      case StateMachinePackage.TIME_OR_RANGE: return createTimeOrRange();
      case StateMachinePackage.VAR_DEFINITION: return createVarDefinition();
      case StateMachinePackage.STATEMENT: return createStatement();
      case StateMachinePackage.EXPRESSION: return createExpression();
      case StateMachinePackage.DELAY: return createDelay();
      case StateMachinePackage.MAX_EXECUTION_TIME: return createMaxExecutionTime();
      case StateMachinePackage.TIME: return createTime();
      case StateMachinePackage.RANGE: return createRange();
      case StateMachinePackage.VAR_ASSIGNATION: return createVarAssignation();
      case StateMachinePackage.EQUALITY: return createEquality();
      case StateMachinePackage.BOOL_EXP: return createBoolExp();
      case StateMachinePackage.SM_NUMBER: return createSMNumber();
      case StateMachinePackage.SM_BOOL: return createSMBool();
      case StateMachinePackage.VAR_REFERENCE: return createVarReference();
      case StateMachinePackage.NEGATION: return createNegation();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Root createRoot()
  {
    RootImpl root = new RootImpl();
    return root;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Machine createMachine()
  {
    MachineImpl machine = new MachineImpl();
    return machine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public State createState()
  {
    StateImpl state = new StateImpl();
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Transition createTransition()
  {
    TransitionImpl transition = new TransitionImpl();
    return transition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SafetyProperty createSafetyProperty()
  {
    SafetyPropertyImpl safetyProperty = new SafetyPropertyImpl();
    return safetyProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimeOrRange createTimeOrRange()
  {
    TimeOrRangeImpl timeOrRange = new TimeOrRangeImpl();
    return timeOrRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarDefinition createVarDefinition()
  {
    VarDefinitionImpl varDefinition = new VarDefinitionImpl();
    return varDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Delay createDelay()
  {
    DelayImpl delay = new DelayImpl();
    return delay;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MaxExecutionTime createMaxExecutionTime()
  {
    MaxExecutionTimeImpl maxExecutionTime = new MaxExecutionTimeImpl();
    return maxExecutionTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Time createTime()
  {
    TimeImpl time = new TimeImpl();
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Range createRange()
  {
    RangeImpl range = new RangeImpl();
    return range;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarAssignation createVarAssignation()
  {
    VarAssignationImpl varAssignation = new VarAssignationImpl();
    return varAssignation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Equality createEquality()
  {
    EqualityImpl equality = new EqualityImpl();
    return equality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BoolExp createBoolExp()
  {
    BoolExpImpl boolExp = new BoolExpImpl();
    return boolExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SMNumber createSMNumber()
  {
    SMNumberImpl smNumber = new SMNumberImpl();
    return smNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SMBool createSMBool()
  {
    SMBoolImpl smBool = new SMBoolImpl();
    return smBool;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarReference createVarReference()
  {
    VarReferenceImpl varReference = new VarReferenceImpl();
    return varReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Negation createNegation()
  {
    NegationImpl negation = new NegationImpl();
    return negation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateMachinePackage getStateMachinePackage()
  {
    return (StateMachinePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static StateMachinePackage getPackage()
  {
    return StateMachinePackage.eINSTANCE;
  }

} //StateMachineFactoryImpl
