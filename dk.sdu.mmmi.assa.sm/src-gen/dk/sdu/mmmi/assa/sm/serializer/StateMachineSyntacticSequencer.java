/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.assa.sm.serializer;

import com.google.inject.Inject;
import dk.sdu.mmmi.assa.sm.services.StateMachineGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class StateMachineSyntacticSequencer extends AbstractSyntacticSequencer {

	protected StateMachineGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Machine___SafetyKeyword_2_0_PropertiesKeyword_2_1_LeftCurlyBracketKeyword_2_2_RightCurlyBracketKeyword_2_4__q;
	protected AbstractElementAlias match_Primary_LeftParenthesisKeyword_4_0_a;
	protected AbstractElementAlias match_Primary_LeftParenthesisKeyword_4_0_p;
	protected AbstractElementAlias match_SafetyProperty___LeftCurlyBracketKeyword_0_4_0_RightCurlyBracketKeyword_0_4_2__q;
	protected AbstractElementAlias match_State___SafetyKeyword_3_0_PropertiesKeyword_3_1_LeftCurlyBracketKeyword_3_2_RightCurlyBracketKeyword_3_4__q;
	protected AbstractElementAlias match_Transition___ActionsKeyword_7_0_LeftCurlyBracketKeyword_7_1_RightCurlyBracketKeyword_7_3__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (StateMachineGrammarAccess) access;
		match_Machine___SafetyKeyword_2_0_PropertiesKeyword_2_1_LeftCurlyBracketKeyword_2_2_RightCurlyBracketKeyword_2_4__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getMachineAccess().getSafetyKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getMachineAccess().getPropertiesKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getMachineAccess().getLeftCurlyBracketKeyword_2_2()), new TokenAlias(false, false, grammarAccess.getMachineAccess().getRightCurlyBracketKeyword_2_4()));
		match_Primary_LeftParenthesisKeyword_4_0_a = new TokenAlias(true, true, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_4_0());
		match_Primary_LeftParenthesisKeyword_4_0_p = new TokenAlias(true, false, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_4_0());
		match_SafetyProperty___LeftCurlyBracketKeyword_0_4_0_RightCurlyBracketKeyword_0_4_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getSafetyPropertyAccess().getLeftCurlyBracketKeyword_0_4_0()), new TokenAlias(false, false, grammarAccess.getSafetyPropertyAccess().getRightCurlyBracketKeyword_0_4_2()));
		match_State___SafetyKeyword_3_0_PropertiesKeyword_3_1_LeftCurlyBracketKeyword_3_2_RightCurlyBracketKeyword_3_4__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getStateAccess().getSafetyKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getStateAccess().getPropertiesKeyword_3_1()), new TokenAlias(false, false, grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_3_2()), new TokenAlias(false, false, grammarAccess.getStateAccess().getRightCurlyBracketKeyword_3_4()));
		match_Transition___ActionsKeyword_7_0_LeftCurlyBracketKeyword_7_1_RightCurlyBracketKeyword_7_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getTransitionAccess().getActionsKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getTransitionAccess().getLeftCurlyBracketKeyword_7_1()), new TokenAlias(false, false, grammarAccess.getTransitionAccess().getRightCurlyBracketKeyword_7_3()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Machine___SafetyKeyword_2_0_PropertiesKeyword_2_1_LeftCurlyBracketKeyword_2_2_RightCurlyBracketKeyword_2_4__q.equals(syntax))
				emit_Machine___SafetyKeyword_2_0_PropertiesKeyword_2_1_LeftCurlyBracketKeyword_2_2_RightCurlyBracketKeyword_2_4__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_LeftParenthesisKeyword_4_0_a.equals(syntax))
				emit_Primary_LeftParenthesisKeyword_4_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_LeftParenthesisKeyword_4_0_p.equals(syntax))
				emit_Primary_LeftParenthesisKeyword_4_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SafetyProperty___LeftCurlyBracketKeyword_0_4_0_RightCurlyBracketKeyword_0_4_2__q.equals(syntax))
				emit_SafetyProperty___LeftCurlyBracketKeyword_0_4_0_RightCurlyBracketKeyword_0_4_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_State___SafetyKeyword_3_0_PropertiesKeyword_3_1_LeftCurlyBracketKeyword_3_2_RightCurlyBracketKeyword_3_4__q.equals(syntax))
				emit_State___SafetyKeyword_3_0_PropertiesKeyword_3_1_LeftCurlyBracketKeyword_3_2_RightCurlyBracketKeyword_3_4__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Transition___ActionsKeyword_7_0_LeftCurlyBracketKeyword_7_1_RightCurlyBracketKeyword_7_3__q.equals(syntax))
				emit_Transition___ActionsKeyword_7_0_LeftCurlyBracketKeyword_7_1_RightCurlyBracketKeyword_7_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('safety' 'properties' '{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) '{' '}' (rule end)
	 *     name=ID (ambiguity) '{' states+=State
	 *     name=ID (ambiguity) '{' transitions+=Transition
	 *     name=ID (ambiguity) '{' vars+=VarDefinition
	 */
	protected void emit_Machine___SafetyKeyword_2_0_PropertiesKeyword_2_1_LeftCurlyBracketKeyword_2_2_RightCurlyBracketKeyword_2_4__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!' exp=Primary
	 *     (rule start) (ambiguity) value=Boolean
	 *     (rule start) (ambiguity) value=INT
	 *     (rule start) (ambiguity) variable=[VarDefinition|ID]
	 *     (rule start) (ambiguity) {BoolExp.left=}
	 *     (rule start) (ambiguity) {Equality.left=}
	 */
	protected void emit_Primary_LeftParenthesisKeyword_4_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {BoolExp.left=}
	 *     (rule start) (ambiguity) {Equality.left=}
	 */
	protected void emit_Primary_LeftParenthesisKeyword_4_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     time=TimeOrRange (ambiguity) (rule end)
	 */
	protected void emit_SafetyProperty___LeftCurlyBracketKeyword_0_4_0_RightCurlyBracketKeyword_0_4_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('safety' 'properties' '{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) 'with' machine=Machine
	 *     name=ID (ambiguity) (rule end)
	 */
	protected void emit_State___SafetyKeyword_3_0_PropertiesKeyword_3_1_LeftCurlyBracketKeyword_3_2_RightCurlyBracketKeyword_3_4__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('actions' '{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     guard=Expression (ambiguity) (rule end)
	 *     signal=ID (ambiguity) (rule end)
	 *     timeout=Float (ambiguity) (rule end)
	 *     to=[State|ID] (ambiguity) (rule end)
	 *     when=ID (ambiguity) (rule end)
	 */
	protected void emit_Transition___ActionsKeyword_7_0_LeftCurlyBracketKeyword_7_1_RightCurlyBracketKeyword_7_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
