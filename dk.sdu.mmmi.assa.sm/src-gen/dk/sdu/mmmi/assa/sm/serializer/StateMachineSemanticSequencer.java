/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.assa.sm.serializer;

import com.google.inject.Inject;
import dk.sdu.mmmi.assa.sm.services.StateMachineGrammarAccess;
import dk.sdu.mmmi.assa.sm.stateMachine.BoolExp;
import dk.sdu.mmmi.assa.sm.stateMachine.Delay;
import dk.sdu.mmmi.assa.sm.stateMachine.Equality;
import dk.sdu.mmmi.assa.sm.stateMachine.Machine;
import dk.sdu.mmmi.assa.sm.stateMachine.MaxExecutionTime;
import dk.sdu.mmmi.assa.sm.stateMachine.Negation;
import dk.sdu.mmmi.assa.sm.stateMachine.Root;
import dk.sdu.mmmi.assa.sm.stateMachine.SMBool;
import dk.sdu.mmmi.assa.sm.stateMachine.SMNumber;
import dk.sdu.mmmi.assa.sm.stateMachine.State;
import dk.sdu.mmmi.assa.sm.stateMachine.StateMachinePackage;
import dk.sdu.mmmi.assa.sm.stateMachine.Transition;
import dk.sdu.mmmi.assa.sm.stateMachine.VarAssignation;
import dk.sdu.mmmi.assa.sm.stateMachine.VarDefinition;
import dk.sdu.mmmi.assa.sm.stateMachine.VarReference;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class StateMachineSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private StateMachineGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == StateMachinePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case StateMachinePackage.BOOL_EXP:
				sequence_BoolExp(context, (BoolExp) semanticObject); 
				return; 
			case StateMachinePackage.DELAY:
				sequence_SafetyProperty(context, (Delay) semanticObject); 
				return; 
			case StateMachinePackage.EQUALITY:
				sequence_Equality(context, (Equality) semanticObject); 
				return; 
			case StateMachinePackage.MACHINE:
				sequence_Machine(context, (Machine) semanticObject); 
				return; 
			case StateMachinePackage.MAX_EXECUTION_TIME:
				sequence_SafetyProperty(context, (MaxExecutionTime) semanticObject); 
				return; 
			case StateMachinePackage.NEGATION:
				sequence_Primary(context, (Negation) semanticObject); 
				return; 
			case StateMachinePackage.ROOT:
				sequence_Root(context, (Root) semanticObject); 
				return; 
			case StateMachinePackage.SM_BOOL:
				sequence_Primary(context, (SMBool) semanticObject); 
				return; 
			case StateMachinePackage.SM_NUMBER:
				sequence_Primary(context, (SMNumber) semanticObject); 
				return; 
			case StateMachinePackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case StateMachinePackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			case StateMachinePackage.VAR_ASSIGNATION:
				sequence_Statement(context, (VarAssignation) semanticObject); 
				return; 
			case StateMachinePackage.VAR_DEFINITION:
				sequence_VarDefinition(context, (VarDefinition) semanticObject); 
				return; 
			case StateMachinePackage.VAR_REFERENCE:
				sequence_Primary(context, (VarReference) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Expression returns BoolExp
	 *     Equality returns BoolExp
	 *     Equality.Equality_1_0 returns BoolExp
	 *     BoolExp returns BoolExp
	 *     BoolExp.BoolExp_1_0 returns BoolExp
	 *     Primary returns BoolExp
	 *
	 * Constraint:
	 *     (left=BoolExp_BoolExp_1_0 (op='||' | op='&&') right=Primary)
	 */
	protected void sequence_BoolExp(ISerializationContext context, BoolExp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Equality
	 *     Equality returns Equality
	 *     Equality.Equality_1_0 returns Equality
	 *     BoolExp returns Equality
	 *     BoolExp.BoolExp_1_0 returns Equality
	 *     Primary returns Equality
	 *
	 * Constraint:
	 *     (left=Equality_Equality_1_0 (op='<' | op='<=' | op='>' | op='>=' | op='==') right=BoolExp)
	 */
	protected void sequence_Equality(ISerializationContext context, Equality semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Machine returns Machine
	 *
	 * Constraint:
	 *     (name=ID (vars+=VarDefinition | states+=State | transitions+=Transition)*)
	 */
	protected void sequence_Machine(ISerializationContext context, Machine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Negation
	 *     Equality returns Negation
	 *     Equality.Equality_1_0 returns Negation
	 *     BoolExp returns Negation
	 *     BoolExp.BoolExp_1_0 returns Negation
	 *     Primary returns Negation
	 *
	 * Constraint:
	 *     exp=Primary
	 */
	protected void sequence_Primary(ISerializationContext context, Negation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StateMachinePackage.Literals.NEGATION__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachinePackage.Literals.NEGATION__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryAccess().getExpPrimaryParserRuleCall_3_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns SMBool
	 *     Equality returns SMBool
	 *     Equality.Equality_1_0 returns SMBool
	 *     BoolExp returns SMBool
	 *     BoolExp.BoolExp_1_0 returns SMBool
	 *     Primary returns SMBool
	 *
	 * Constraint:
	 *     value=Boolean
	 */
	protected void sequence_Primary(ISerializationContext context, SMBool semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StateMachinePackage.Literals.SM_BOOL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachinePackage.Literals.SM_BOOL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryAccess().getValueBooleanParserRuleCall_1_1_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns SMNumber
	 *     Equality returns SMNumber
	 *     Equality.Equality_1_0 returns SMNumber
	 *     BoolExp returns SMNumber
	 *     BoolExp.BoolExp_1_0 returns SMNumber
	 *     Primary returns SMNumber
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Primary(ISerializationContext context, SMNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StateMachinePackage.Literals.SM_NUMBER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachinePackage.Literals.SM_NUMBER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryAccess().getValueINTTerminalRuleCall_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns VarReference
	 *     Equality returns VarReference
	 *     Equality.Equality_1_0 returns VarReference
	 *     BoolExp returns VarReference
	 *     BoolExp.BoolExp_1_0 returns VarReference
	 *     Primary returns VarReference
	 *
	 * Constraint:
	 *     variable=[VarDefinition|ID]
	 */
	protected void sequence_Primary(ISerializationContext context, VarReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StateMachinePackage.Literals.VAR_REFERENCE__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachinePackage.Literals.VAR_REFERENCE__VARIABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryAccess().getVariableVarDefinitionIDTerminalRuleCall_2_1_0_1(), semanticObject.eGet(StateMachinePackage.Literals.VAR_REFERENCE__VARIABLE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Root returns Root
	 *
	 * Constraint:
	 *     (name=ID vars+=VarDefinition* machines+=Machine*)
	 */
	protected void sequence_Root(ISerializationContext context, Root semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SafetyProperty returns Delay
	 *
	 * Constraint:
	 *     time=Float
	 */
	protected void sequence_SafetyProperty(ISerializationContext context, Delay semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StateMachinePackage.Literals.SAFETY_PROPERTY__TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachinePackage.Literals.SAFETY_PROPERTY__TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSafetyPropertyAccess().getTimeFloatParserRuleCall_0_3_0(), semanticObject.getTime());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SafetyProperty returns MaxExecutionTime
	 *
	 * Constraint:
	 *     time=Float
	 */
	protected void sequence_SafetyProperty(ISerializationContext context, MaxExecutionTime semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StateMachinePackage.Literals.SAFETY_PROPERTY__TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachinePackage.Literals.SAFETY_PROPERTY__TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSafetyPropertyAccess().getTimeFloatParserRuleCall_1_3_0(), semanticObject.getTime());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     ((fail?='fail' | end?='end')? name=ID properties+=SafetyProperty* machine=Machine?)
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns VarAssignation
	 *
	 * Constraint:
	 *     (variable=[VarDefinition|ID] expression=Expression)
	 */
	protected void sequence_Statement(ISerializationContext context, VarAssignation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StateMachinePackage.Literals.VAR_ASSIGNATION__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachinePackage.Literals.VAR_ASSIGNATION__VARIABLE));
			if (transientValues.isValueTransient(semanticObject, StateMachinePackage.Literals.VAR_ASSIGNATION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachinePackage.Literals.VAR_ASSIGNATION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStatementAccess().getVariableVarDefinitionIDTerminalRuleCall_1_0_1(), semanticObject.eGet(StateMachinePackage.Literals.VAR_ASSIGNATION__VARIABLE, false));
		feeder.accept(grammarAccess.getStatementAccess().getExpressionExpressionParserRuleCall_3_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     (
	 *         from=[State|ID] 
	 *         to=[State|ID] 
	 *         (hasGuard?='guard' guard=Expression)? 
	 *         (hasWhen?='when' when=ID)? 
	 *         (time?='after' timeout=Float)? 
	 *         (hasSignal?='signal' signal=ID)? 
	 *         actions+=Statement*
	 *     )
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarDefinition returns VarDefinition
	 *
	 * Constraint:
	 *     (type=Type name=ID expression=Expression)
	 */
	protected void sequence_VarDefinition(ISerializationContext context, VarDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StateMachinePackage.Literals.VAR_DEFINITION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachinePackage.Literals.VAR_DEFINITION__TYPE));
			if (transientValues.isValueTransient(semanticObject, StateMachinePackage.Literals.VAR_DEFINITION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachinePackage.Literals.VAR_DEFINITION__NAME));
			if (transientValues.isValueTransient(semanticObject, StateMachinePackage.Literals.VAR_DEFINITION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachinePackage.Literals.VAR_DEFINITION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarDefinitionAccess().getTypeTypeParserRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getVarDefinitionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getVarDefinitionAccess().getExpressionExpressionParserRuleCall_3_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
}
