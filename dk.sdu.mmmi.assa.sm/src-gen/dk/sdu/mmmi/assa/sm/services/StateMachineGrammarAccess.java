/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.assa.sm.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class StateMachineGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.assa.sm.StateMachine.Root");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cMachineAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMachineMachineParserRuleCall_2_0 = (RuleCall)cMachineAssignment_2.eContents().get(0);
		
		//Root:
		//    (
		//        'project' name=ID
		//        machine=Machine
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//(
		//    'project' name=ID
		//    machine=Machine
		//)?
		public Group getGroup() { return cGroup; }
		
		//'project'
		public Keyword getProjectKeyword_0() { return cProjectKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//machine=Machine
		public Assignment getMachineAssignment_2() { return cMachineAssignment_2; }
		
		//Machine
		public RuleCall getMachineMachineParserRuleCall_2_0() { return cMachineMachineParserRuleCall_2_0; }
	}
	public class MachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.assa.sm.StateMachine.Machine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cStatesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cStatesStateParserRuleCall_3_0_0 = (RuleCall)cStatesAssignment_3_0.eContents().get(0);
		private final Assignment cTransitionsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cTransitionsTransitionParserRuleCall_3_1_0 = (RuleCall)cTransitionsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Machine:
		//    'machine' name=ID '{' (states+=State | transitions+=Transition)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'machine' name=ID '{' (states+=State | transitions+=Transition)* '}'
		public Group getGroup() { return cGroup; }
		
		//'machine'
		public Keyword getMachineKeyword_0() { return cMachineKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(states+=State | transitions+=Transition)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//states+=State
		public Assignment getStatesAssignment_3_0() { return cStatesAssignment_3_0; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_3_0_0() { return cStatesStateParserRuleCall_3_0_0; }
		
		//transitions+=Transition
		public Assignment getTransitionsAssignment_3_1() { return cTransitionsAssignment_3_1; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_3_1_0() { return cTransitionsTransitionParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.assa.sm.StateMachine.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFailAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cFailFailKeyword_0_0 = (Keyword)cFailAssignment_0.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWithKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMachineAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMachineMachineParserRuleCall_3_1_0 = (RuleCall)cMachineAssignment_3_1.eContents().get(0);
		
		//State:
		//    (fail?='fail')? 'state' name=ID ('with' machine=Machine)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(fail?='fail')? 'state' name=ID ('with' machine=Machine)?
		public Group getGroup() { return cGroup; }
		
		//(fail?='fail')?
		public Assignment getFailAssignment_0() { return cFailAssignment_0; }
		
		//'fail'
		public Keyword getFailFailKeyword_0_0() { return cFailFailKeyword_0_0; }
		
		//'state'
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('with' machine=Machine)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'with'
		public Keyword getWithKeyword_3_0() { return cWithKeyword_3_0; }
		
		//machine=Machine
		public Assignment getMachineAssignment_3_1() { return cMachineAssignment_3_1; }
		
		//Machine
		public RuleCall getMachineMachineParserRuleCall_3_1_0() { return cMachineMachineParserRuleCall_3_1_0; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.assa.sm.StateMachine.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFromStateCrossReference_0_0 = (CrossReference)cFromAssignment_0.eContents().get(0);
		private final RuleCall cFromStateIDTerminalRuleCall_0_0_1 = (RuleCall)cFromStateCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cToStateCrossReference_2_0 = (CrossReference)cToAssignment_2.eContents().get(0);
		private final RuleCall cToStateIDTerminalRuleCall_2_0_1 = (RuleCall)cToStateCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWhenKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cWhenAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cWhenIDTerminalRuleCall_3_1_0 = (RuleCall)cWhenAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cTimeAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cTimeAfterKeyword_4_0_0 = (Keyword)cTimeAssignment_4_0.eContents().get(0);
		private final Assignment cTimeoutAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTimeoutFloatParserRuleCall_4_1_0 = (RuleCall)cTimeoutAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSignalKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSignalAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSignalIDTerminalRuleCall_5_1_0 = (RuleCall)cSignalAssignment_5_1.eContents().get(0);
		
		//Transition:
		//    from=[State] '->' to=[State]
		//        ('when' when=ID)?
		//        (time?='after' timeout=Float)?
		//        ('signal' signal=ID)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//from=[State] '->' to=[State]
		//    ('when' when=ID)?
		//    (time?='after' timeout=Float)?
		//    ('signal' signal=ID)?
		public Group getGroup() { return cGroup; }
		
		//from=[State]
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }
		
		//[State]
		public CrossReference getFromStateCrossReference_0_0() { return cFromStateCrossReference_0_0; }
		
		//ID
		public RuleCall getFromStateIDTerminalRuleCall_0_0_1() { return cFromStateIDTerminalRuleCall_0_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//to=[State]
		public Assignment getToAssignment_2() { return cToAssignment_2; }
		
		//[State]
		public CrossReference getToStateCrossReference_2_0() { return cToStateCrossReference_2_0; }
		
		//ID
		public RuleCall getToStateIDTerminalRuleCall_2_0_1() { return cToStateIDTerminalRuleCall_2_0_1; }
		
		//('when' when=ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'when'
		public Keyword getWhenKeyword_3_0() { return cWhenKeyword_3_0; }
		
		//when=ID
		public Assignment getWhenAssignment_3_1() { return cWhenAssignment_3_1; }
		
		//ID
		public RuleCall getWhenIDTerminalRuleCall_3_1_0() { return cWhenIDTerminalRuleCall_3_1_0; }
		
		//(time?='after' timeout=Float)?
		public Group getGroup_4() { return cGroup_4; }
		
		//time?='after'
		public Assignment getTimeAssignment_4_0() { return cTimeAssignment_4_0; }
		
		//'after'
		public Keyword getTimeAfterKeyword_4_0_0() { return cTimeAfterKeyword_4_0_0; }
		
		//timeout=Float
		public Assignment getTimeoutAssignment_4_1() { return cTimeoutAssignment_4_1; }
		
		//Float
		public RuleCall getTimeoutFloatParserRuleCall_4_1_0() { return cTimeoutFloatParserRuleCall_4_1_0; }
		
		//('signal' signal=ID)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'signal'
		public Keyword getSignalKeyword_5_0() { return cSignalKeyword_5_0; }
		
		//signal=ID
		public Assignment getSignalAssignment_5_1() { return cSignalAssignment_5_1; }
		
		//ID
		public RuleCall getSignalIDTerminalRuleCall_5_1_0() { return cSignalIDTerminalRuleCall_5_1_0; }
	}
	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.assa.sm.StateMachine.Float");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Float returns ecore::EFloat: INT ('.' INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT)?
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//('.' INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	
	
	private final RootElements pRoot;
	private final MachineElements pMachine;
	private final StateElements pState;
	private final TransitionElements pTransition;
	private final FloatElements pFloat;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StateMachineGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRoot = new RootElements();
		this.pMachine = new MachineElements();
		this.pState = new StateElements();
		this.pTransition = new TransitionElements();
		this.pFloat = new FloatElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.mmmi.assa.sm.StateMachine".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Root:
	//    (
	//        'project' name=ID
	//        machine=Machine
	//    )?;
	public RootElements getRootAccess() {
		return pRoot;
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}
	
	//Machine:
	//    'machine' name=ID '{' (states+=State | transitions+=Transition)* '}';
	public MachineElements getMachineAccess() {
		return pMachine;
	}
	
	public ParserRule getMachineRule() {
		return getMachineAccess().getRule();
	}
	
	//State:
	//    (fail?='fail')? 'state' name=ID ('with' machine=Machine)?
	//;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Transition:
	//    from=[State] '->' to=[State]
	//        ('when' when=ID)?
	//        (time?='after' timeout=Float)?
	//        ('signal' signal=ID)?
	//;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//Float returns ecore::EFloat: INT ('.' INT)?;
	public FloatElements getFloatAccess() {
		return pFloat;
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
