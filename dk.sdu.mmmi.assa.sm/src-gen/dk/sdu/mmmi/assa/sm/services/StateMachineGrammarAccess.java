/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.assa.sm.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class StateMachineGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.assa.sm.StateMachine.Root");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cMachinesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMachinesMachineParserRuleCall_2_0 = (RuleCall)cMachinesAssignment_2.eContents().get(0);
		
		//Root:
		//    (
		//        'project' name=ID
		//        machines+=Machine*
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//(
		//    'project' name=ID
		//    machines+=Machine*
		//)?
		public Group getGroup() { return cGroup; }
		
		//'project'
		public Keyword getProjectKeyword_0() { return cProjectKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//machines+=Machine*
		public Assignment getMachinesAssignment_2() { return cMachinesAssignment_2; }
		
		//Machine
		public RuleCall getMachinesMachineParserRuleCall_2_0() { return cMachinesMachineParserRuleCall_2_0; }
	}
	public class MachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.assa.sm.StateMachine.Machine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cVarsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cVarsVarDefinitionParserRuleCall_3_0_0 = (RuleCall)cVarsAssignment_3_0.eContents().get(0);
		private final Assignment cStatesAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_3_1_0 = (RuleCall)cStatesAssignment_3_1.eContents().get(0);
		private final Assignment cTransitionsAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cTransitionsTransitionParserRuleCall_3_2_0 = (RuleCall)cTransitionsAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Machine:
		//    'machine' name=ID '{' (vars+=VarDefinition | states+=State | transitions+=Transition)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'machine' name=ID '{' (vars+=VarDefinition | states+=State | transitions+=Transition)* '}'
		public Group getGroup() { return cGroup; }
		
		//'machine'
		public Keyword getMachineKeyword_0() { return cMachineKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(vars+=VarDefinition | states+=State | transitions+=Transition)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//vars+=VarDefinition
		public Assignment getVarsAssignment_3_0() { return cVarsAssignment_3_0; }
		
		//VarDefinition
		public RuleCall getVarsVarDefinitionParserRuleCall_3_0_0() { return cVarsVarDefinitionParserRuleCall_3_0_0; }
		
		//states+=State
		public Assignment getStatesAssignment_3_1() { return cStatesAssignment_3_1; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_3_1_0() { return cStatesStateParserRuleCall_3_1_0; }
		
		//transitions+=Transition
		public Assignment getTransitionsAssignment_3_2() { return cTransitionsAssignment_3_2; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_3_2_0() { return cTransitionsTransitionParserRuleCall_3_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.assa.sm.StateMachine.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cFailAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cFailFailKeyword_0_0_0 = (Keyword)cFailAssignment_0_0.eContents().get(0);
		private final Assignment cEndAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cEndEndKeyword_0_1_0 = (Keyword)cEndAssignment_0_1.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSafetyKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cPropertiesKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cPropertiesAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cPropertiesSafetyPropertyParserRuleCall_3_3_0 = (RuleCall)cPropertiesAssignment_3_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMachineAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMachineMachineParserRuleCall_4_1_0 = (RuleCall)cMachineAssignment_4_1.eContents().get(0);
		
		//State:
		//    (fail?='fail' | end?='end')? 'state' name=ID ('safety' 'properties' '{' properties+=SafetyProperty* '}')? ('with' machine=Machine)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(fail?='fail' | end?='end')? 'state' name=ID ('safety' 'properties' '{' properties+=SafetyProperty* '}')? ('with' machine=Machine)?
		public Group getGroup() { return cGroup; }
		
		//(fail?='fail' | end?='end')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//fail?='fail'
		public Assignment getFailAssignment_0_0() { return cFailAssignment_0_0; }
		
		//'fail'
		public Keyword getFailFailKeyword_0_0_0() { return cFailFailKeyword_0_0_0; }
		
		//end?='end'
		public Assignment getEndAssignment_0_1() { return cEndAssignment_0_1; }
		
		//'end'
		public Keyword getEndEndKeyword_0_1_0() { return cEndEndKeyword_0_1_0; }
		
		//'state'
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('safety' 'properties' '{' properties+=SafetyProperty* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'safety'
		public Keyword getSafetyKeyword_3_0() { return cSafetyKeyword_3_0; }
		
		//'properties'
		public Keyword getPropertiesKeyword_3_1() { return cPropertiesKeyword_3_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_2() { return cLeftCurlyBracketKeyword_3_2; }
		
		//properties+=SafetyProperty*
		public Assignment getPropertiesAssignment_3_3() { return cPropertiesAssignment_3_3; }
		
		//SafetyProperty
		public RuleCall getPropertiesSafetyPropertyParserRuleCall_3_3_0() { return cPropertiesSafetyPropertyParserRuleCall_3_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//('with' machine=Machine)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'with'
		public Keyword getWithKeyword_4_0() { return cWithKeyword_4_0; }
		
		//machine=Machine
		public Assignment getMachineAssignment_4_1() { return cMachineAssignment_4_1; }
		
		//Machine
		public RuleCall getMachineMachineParserRuleCall_4_1_0() { return cMachineMachineParserRuleCall_4_1_0; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.assa.sm.StateMachine.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFromStateCrossReference_0_0 = (CrossReference)cFromAssignment_0.eContents().get(0);
		private final RuleCall cFromStateIDTerminalRuleCall_0_0_1 = (RuleCall)cFromStateCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cToStateCrossReference_2_0 = (CrossReference)cToAssignment_2.eContents().get(0);
		private final RuleCall cToStateIDTerminalRuleCall_2_0_1 = (RuleCall)cToStateCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cHasGuardAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cHasGuardGuardKeyword_3_0_0 = (Keyword)cHasGuardAssignment_3_0.eContents().get(0);
		private final Assignment cGuardAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGuardBooleanParserRuleCall_3_1_0 = (RuleCall)cGuardAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cHasWhenAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cHasWhenWhenKeyword_4_0_0 = (Keyword)cHasWhenAssignment_4_0.eContents().get(0);
		private final Assignment cWhenAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWhenIDTerminalRuleCall_4_1_0 = (RuleCall)cWhenAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cTimeAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cTimeAfterKeyword_5_0_0 = (Keyword)cTimeAssignment_5_0.eContents().get(0);
		private final Assignment cTimeoutAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTimeoutFloatParserRuleCall_5_1_0 = (RuleCall)cTimeoutAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cHasSignalAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cHasSignalSignalKeyword_6_0_0 = (Keyword)cHasSignalAssignment_6_0.eContents().get(0);
		private final Assignment cSignalAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSignalIDTerminalRuleCall_6_1_0 = (RuleCall)cSignalAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cActionsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cActionsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cActionsStatementParserRuleCall_7_2_0 = (RuleCall)cActionsAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//Transition:
		//    from=[State] '->' to=[State]
		//        (hasGuard?='guard' guard=Boolean)?
		//        (hasWhen?='when' when=ID)?
		//        (time?='after' timeout=Float)?
		//        (hasSignal?='signal' signal=ID)?
		//        ('actions' '{' actions+=Statement* '}')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//from=[State] '->' to=[State]
		//    (hasGuard?='guard' guard=Boolean)?
		//    (hasWhen?='when' when=ID)?
		//    (time?='after' timeout=Float)?
		//    (hasSignal?='signal' signal=ID)?
		//    ('actions' '{' actions+=Statement* '}')?
		public Group getGroup() { return cGroup; }
		
		//from=[State]
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }
		
		//[State]
		public CrossReference getFromStateCrossReference_0_0() { return cFromStateCrossReference_0_0; }
		
		//ID
		public RuleCall getFromStateIDTerminalRuleCall_0_0_1() { return cFromStateIDTerminalRuleCall_0_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//to=[State]
		public Assignment getToAssignment_2() { return cToAssignment_2; }
		
		//[State]
		public CrossReference getToStateCrossReference_2_0() { return cToStateCrossReference_2_0; }
		
		//ID
		public RuleCall getToStateIDTerminalRuleCall_2_0_1() { return cToStateIDTerminalRuleCall_2_0_1; }
		
		//(hasGuard?='guard' guard=Boolean)?
		public Group getGroup_3() { return cGroup_3; }
		
		//hasGuard?='guard'
		public Assignment getHasGuardAssignment_3_0() { return cHasGuardAssignment_3_0; }
		
		//'guard'
		public Keyword getHasGuardGuardKeyword_3_0_0() { return cHasGuardGuardKeyword_3_0_0; }
		
		//guard=Boolean
		public Assignment getGuardAssignment_3_1() { return cGuardAssignment_3_1; }
		
		//Boolean
		public RuleCall getGuardBooleanParserRuleCall_3_1_0() { return cGuardBooleanParserRuleCall_3_1_0; }
		
		//(hasWhen?='when' when=ID)?
		public Group getGroup_4() { return cGroup_4; }
		
		//hasWhen?='when'
		public Assignment getHasWhenAssignment_4_0() { return cHasWhenAssignment_4_0; }
		
		//'when'
		public Keyword getHasWhenWhenKeyword_4_0_0() { return cHasWhenWhenKeyword_4_0_0; }
		
		//when=ID
		public Assignment getWhenAssignment_4_1() { return cWhenAssignment_4_1; }
		
		//ID
		public RuleCall getWhenIDTerminalRuleCall_4_1_0() { return cWhenIDTerminalRuleCall_4_1_0; }
		
		//(time?='after' timeout=Float)?
		public Group getGroup_5() { return cGroup_5; }
		
		//time?='after'
		public Assignment getTimeAssignment_5_0() { return cTimeAssignment_5_0; }
		
		//'after'
		public Keyword getTimeAfterKeyword_5_0_0() { return cTimeAfterKeyword_5_0_0; }
		
		//timeout=Float
		public Assignment getTimeoutAssignment_5_1() { return cTimeoutAssignment_5_1; }
		
		//Float
		public RuleCall getTimeoutFloatParserRuleCall_5_1_0() { return cTimeoutFloatParserRuleCall_5_1_0; }
		
		//(hasSignal?='signal' signal=ID)?
		public Group getGroup_6() { return cGroup_6; }
		
		//hasSignal?='signal'
		public Assignment getHasSignalAssignment_6_0() { return cHasSignalAssignment_6_0; }
		
		//'signal'
		public Keyword getHasSignalSignalKeyword_6_0_0() { return cHasSignalSignalKeyword_6_0_0; }
		
		//signal=ID
		public Assignment getSignalAssignment_6_1() { return cSignalAssignment_6_1; }
		
		//ID
		public RuleCall getSignalIDTerminalRuleCall_6_1_0() { return cSignalIDTerminalRuleCall_6_1_0; }
		
		//('actions' '{' actions+=Statement* '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'actions'
		public Keyword getActionsKeyword_7_0() { return cActionsKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//actions+=Statement*
		public Assignment getActionsAssignment_7_2() { return cActionsAssignment_7_2; }
		
		//Statement
		public RuleCall getActionsStatementParserRuleCall_7_2_0() { return cActionsStatementParserRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}
	public class SafetyPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.assa.sm.StateMachine.SafetyProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDelayAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cStartupKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cDelayKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cTimeAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cTimeFloatParserRuleCall_0_3_0 = (RuleCall)cTimeAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cMaxExecutionTimeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cMaxKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cExecutionKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cTimeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cTimeFloatParserRuleCall_1_3_0 = (RuleCall)cTimeAssignment_1_3.eContents().get(0);
		
		//SafetyProperty:
		//    {Delay} 'startup' 'delay' time=Float |
		//    {MaxExecutionTime} 'max' 'execution' time=Float
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Delay} 'startup' 'delay' time=Float |
		//{MaxExecutionTime} 'max' 'execution' time=Float
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Delay} 'startup' 'delay' time=Float
		public Group getGroup_0() { return cGroup_0; }
		
		//{Delay}
		public Action getDelayAction_0_0() { return cDelayAction_0_0; }
		
		//'startup'
		public Keyword getStartupKeyword_0_1() { return cStartupKeyword_0_1; }
		
		//'delay'
		public Keyword getDelayKeyword_0_2() { return cDelayKeyword_0_2; }
		
		//time=Float
		public Assignment getTimeAssignment_0_3() { return cTimeAssignment_0_3; }
		
		//Float
		public RuleCall getTimeFloatParserRuleCall_0_3_0() { return cTimeFloatParserRuleCall_0_3_0; }
		
		//{MaxExecutionTime} 'max' 'execution' time=Float
		public Group getGroup_1() { return cGroup_1; }
		
		//{MaxExecutionTime}
		public Action getMaxExecutionTimeAction_1_0() { return cMaxExecutionTimeAction_1_0; }
		
		//'max'
		public Keyword getMaxKeyword_1_1() { return cMaxKeyword_1_1; }
		
		//'execution'
		public Keyword getExecutionKeyword_1_2() { return cExecutionKeyword_1_2; }
		
		//time=Float
		public Assignment getTimeAssignment_1_3() { return cTimeAssignment_1_3; }
		
		//Float
		public RuleCall getTimeFloatParserRuleCall_1_3_0() { return cTimeFloatParserRuleCall_1_3_0; }
	}
	public class VarDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.assa.sm.StateMachine.VarDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//VarDefinition:
		//    type=Type name=ID ':=' expression=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type name=ID ':=' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.assa.sm.StateMachine.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarAssignationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariableVarDefinitionCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableVarDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cVariableVarDefinitionCrossReference_1_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//Statement:
		//    {VarAssignation} variable=[VarDefinition] ':=' expression=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{VarAssignation} variable=[VarDefinition] ':=' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//{VarAssignation}
		public Action getVarAssignationAction_0() { return cVarAssignationAction_0; }
		
		//variable=[VarDefinition]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[VarDefinition]
		public CrossReference getVariableVarDefinitionCrossReference_1_0() { return cVariableVarDefinitionCrossReference_1_0; }
		
		//ID
		public RuleCall getVariableVarDefinitionIDTerminalRuleCall_1_0_1() { return cVariableVarDefinitionIDTerminalRuleCall_1_0_1; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.assa.sm.StateMachine.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSMNumberAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSMBoolAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueBooleanParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//Expression:
		//    {SMNumber} value=INT |
		//    {SMBool} value=Boolean
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SMNumber} value=INT |
		//{SMBool} value=Boolean
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SMNumber} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{SMNumber}
		public Action getSMNumberAction_0_0() { return cSMNumberAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{SMBool} value=Boolean
		public Group getGroup_1() { return cGroup_1; }
		
		//{SMBool}
		public Action getSMBoolAction_1_0() { return cSMBoolAction_1_0; }
		
		//value=Boolean
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//Boolean
		public RuleCall getValueBooleanParserRuleCall_1_1_0() { return cValueBooleanParserRuleCall_1_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.assa.sm.StateMachine.Type");
		private final Keyword cBoolKeyword = (Keyword)rule.eContents().get(1);
		
		//Type: 'bool';
		@Override public ParserRule getRule() { return rule; }
		
		//'bool'
		public Keyword getBoolKeyword() { return cBoolKeyword; }
	}
	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.assa.sm.StateMachine.Float");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Float returns ecore::EFloat: INT ('.' INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT)?
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//('.' INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.assa.sm.StateMachine.Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Boolean returns ecore::EBoolean: 'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	
	private final RootElements pRoot;
	private final MachineElements pMachine;
	private final StateElements pState;
	private final TransitionElements pTransition;
	private final SafetyPropertyElements pSafetyProperty;
	private final VarDefinitionElements pVarDefinition;
	private final StatementElements pStatement;
	private final ExpressionElements pExpression;
	private final TypeElements pType;
	private final FloatElements pFloat;
	private final BooleanElements pBoolean;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StateMachineGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRoot = new RootElements();
		this.pMachine = new MachineElements();
		this.pState = new StateElements();
		this.pTransition = new TransitionElements();
		this.pSafetyProperty = new SafetyPropertyElements();
		this.pVarDefinition = new VarDefinitionElements();
		this.pStatement = new StatementElements();
		this.pExpression = new ExpressionElements();
		this.pType = new TypeElements();
		this.pFloat = new FloatElements();
		this.pBoolean = new BooleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.mmmi.assa.sm.StateMachine".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Root:
	//    (
	//        'project' name=ID
	//        machines+=Machine*
	//    )?;
	public RootElements getRootAccess() {
		return pRoot;
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}
	
	//Machine:
	//    'machine' name=ID '{' (vars+=VarDefinition | states+=State | transitions+=Transition)* '}';
	public MachineElements getMachineAccess() {
		return pMachine;
	}
	
	public ParserRule getMachineRule() {
		return getMachineAccess().getRule();
	}
	
	//State:
	//    (fail?='fail' | end?='end')? 'state' name=ID ('safety' 'properties' '{' properties+=SafetyProperty* '}')? ('with' machine=Machine)?
	//;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Transition:
	//    from=[State] '->' to=[State]
	//        (hasGuard?='guard' guard=Boolean)?
	//        (hasWhen?='when' when=ID)?
	//        (time?='after' timeout=Float)?
	//        (hasSignal?='signal' signal=ID)?
	//        ('actions' '{' actions+=Statement* '}')?
	//;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//SafetyProperty:
	//    {Delay} 'startup' 'delay' time=Float |
	//    {MaxExecutionTime} 'max' 'execution' time=Float
	//;
	public SafetyPropertyElements getSafetyPropertyAccess() {
		return pSafetyProperty;
	}
	
	public ParserRule getSafetyPropertyRule() {
		return getSafetyPropertyAccess().getRule();
	}
	
	//VarDefinition:
	//    type=Type name=ID ':=' expression=Expression
	//;
	public VarDefinitionElements getVarDefinitionAccess() {
		return pVarDefinition;
	}
	
	public ParserRule getVarDefinitionRule() {
		return getVarDefinitionAccess().getRule();
	}
	
	//Statement:
	//    {VarAssignation} variable=[VarDefinition] ':=' expression=Expression
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Expression:
	//    {SMNumber} value=INT |
	//    {SMBool} value=Boolean
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Type: 'bool';
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Float returns ecore::EFloat: INT ('.' INT)?;
	public FloatElements getFloatAccess() {
		return pFloat;
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}
	
	//Boolean returns ecore::EBoolean: 'true' | 'false';
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
