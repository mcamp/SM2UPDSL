/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.assa.sm.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import dk.sdu.mmmi.assa.sm.ide.contentassist.antlr.internal.InternalStateMachineParser;
import dk.sdu.mmmi.assa.sm.services.StateMachineGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class StateMachineParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(StateMachineGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, StateMachineGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getMachineAccess().getAlternatives_3(), "rule__Machine__Alternatives_3");
			builder.put(grammarAccess.getStateAccess().getAlternatives_0(), "rule__State__Alternatives_0");
			builder.put(grammarAccess.getSafetyPropertyAccess().getAlternatives(), "rule__SafetyProperty__Alternatives");
			builder.put(grammarAccess.getEqualityAccess().getOpAlternatives_1_1_0(), "rule__Equality__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getBoolExpAccess().getOpAlternatives_1_1_0(), "rule__BoolExp__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getBooleanAccess().getAlternatives(), "rule__Boolean__Alternatives");
			builder.put(grammarAccess.getRootAccess().getGroup(), "rule__Root__Group__0");
			builder.put(grammarAccess.getMachineAccess().getGroup(), "rule__Machine__Group__0");
			builder.put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
			builder.put(grammarAccess.getStateAccess().getGroup_3(), "rule__State__Group_3__0");
			builder.put(grammarAccess.getStateAccess().getGroup_4(), "rule__State__Group_4__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup_3(), "rule__Transition__Group_3__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup_4(), "rule__Transition__Group_4__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup_5(), "rule__Transition__Group_5__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup_6(), "rule__Transition__Group_6__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup_7(), "rule__Transition__Group_7__0");
			builder.put(grammarAccess.getSafetyPropertyAccess().getGroup_0(), "rule__SafetyProperty__Group_0__0");
			builder.put(grammarAccess.getSafetyPropertyAccess().getGroup_1(), "rule__SafetyProperty__Group_1__0");
			builder.put(grammarAccess.getVarDefinitionAccess().getGroup(), "rule__VarDefinition__Group__0");
			builder.put(grammarAccess.getStatementAccess().getGroup(), "rule__Statement__Group__0");
			builder.put(grammarAccess.getEqualityAccess().getGroup(), "rule__Equality__Group__0");
			builder.put(grammarAccess.getEqualityAccess().getGroup_1(), "rule__Equality__Group_1__0");
			builder.put(grammarAccess.getBoolExpAccess().getGroup(), "rule__BoolExp__Group__0");
			builder.put(grammarAccess.getBoolExpAccess().getGroup_1(), "rule__BoolExp__Group_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_0(), "rule__Primary__Group_0__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_2(), "rule__Primary__Group_2__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_3(), "rule__Primary__Group_3__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_4(), "rule__Primary__Group_4__0");
			builder.put(grammarAccess.getFloatAccess().getGroup(), "rule__Float__Group__0");
			builder.put(grammarAccess.getFloatAccess().getGroup_1(), "rule__Float__Group_1__0");
			builder.put(grammarAccess.getRootAccess().getNameAssignment_1(), "rule__Root__NameAssignment_1");
			builder.put(grammarAccess.getRootAccess().getVarsAssignment_2(), "rule__Root__VarsAssignment_2");
			builder.put(grammarAccess.getRootAccess().getMachinesAssignment_3(), "rule__Root__MachinesAssignment_3");
			builder.put(grammarAccess.getMachineAccess().getNameAssignment_1(), "rule__Machine__NameAssignment_1");
			builder.put(grammarAccess.getMachineAccess().getVarsAssignment_3_0(), "rule__Machine__VarsAssignment_3_0");
			builder.put(grammarAccess.getMachineAccess().getStatesAssignment_3_1(), "rule__Machine__StatesAssignment_3_1");
			builder.put(grammarAccess.getMachineAccess().getTransitionsAssignment_3_2(), "rule__Machine__TransitionsAssignment_3_2");
			builder.put(grammarAccess.getStateAccess().getFailAssignment_0_0(), "rule__State__FailAssignment_0_0");
			builder.put(grammarAccess.getStateAccess().getEndAssignment_0_1(), "rule__State__EndAssignment_0_1");
			builder.put(grammarAccess.getStateAccess().getNameAssignment_2(), "rule__State__NameAssignment_2");
			builder.put(grammarAccess.getStateAccess().getPropertiesAssignment_3_3(), "rule__State__PropertiesAssignment_3_3");
			builder.put(grammarAccess.getStateAccess().getMachineAssignment_4_1(), "rule__State__MachineAssignment_4_1");
			builder.put(grammarAccess.getTransitionAccess().getFromAssignment_0(), "rule__Transition__FromAssignment_0");
			builder.put(grammarAccess.getTransitionAccess().getToAssignment_2(), "rule__Transition__ToAssignment_2");
			builder.put(grammarAccess.getTransitionAccess().getHasGuardAssignment_3_0(), "rule__Transition__HasGuardAssignment_3_0");
			builder.put(grammarAccess.getTransitionAccess().getGuardAssignment_3_1(), "rule__Transition__GuardAssignment_3_1");
			builder.put(grammarAccess.getTransitionAccess().getHasWhenAssignment_4_0(), "rule__Transition__HasWhenAssignment_4_0");
			builder.put(grammarAccess.getTransitionAccess().getWhenAssignment_4_1(), "rule__Transition__WhenAssignment_4_1");
			builder.put(grammarAccess.getTransitionAccess().getTimeAssignment_5_0(), "rule__Transition__TimeAssignment_5_0");
			builder.put(grammarAccess.getTransitionAccess().getTimeoutAssignment_5_1(), "rule__Transition__TimeoutAssignment_5_1");
			builder.put(grammarAccess.getTransitionAccess().getHasSignalAssignment_6_0(), "rule__Transition__HasSignalAssignment_6_0");
			builder.put(grammarAccess.getTransitionAccess().getSignalAssignment_6_1(), "rule__Transition__SignalAssignment_6_1");
			builder.put(grammarAccess.getTransitionAccess().getActionsAssignment_7_2(), "rule__Transition__ActionsAssignment_7_2");
			builder.put(grammarAccess.getSafetyPropertyAccess().getTimeAssignment_0_3(), "rule__SafetyProperty__TimeAssignment_0_3");
			builder.put(grammarAccess.getSafetyPropertyAccess().getTimeAssignment_1_3(), "rule__SafetyProperty__TimeAssignment_1_3");
			builder.put(grammarAccess.getVarDefinitionAccess().getTypeAssignment_0(), "rule__VarDefinition__TypeAssignment_0");
			builder.put(grammarAccess.getVarDefinitionAccess().getNameAssignment_1(), "rule__VarDefinition__NameAssignment_1");
			builder.put(grammarAccess.getVarDefinitionAccess().getExpressionAssignment_3(), "rule__VarDefinition__ExpressionAssignment_3");
			builder.put(grammarAccess.getStatementAccess().getVariableAssignment_1(), "rule__Statement__VariableAssignment_1");
			builder.put(grammarAccess.getStatementAccess().getExpressionAssignment_3(), "rule__Statement__ExpressionAssignment_3");
			builder.put(grammarAccess.getEqualityAccess().getOpAssignment_1_1(), "rule__Equality__OpAssignment_1_1");
			builder.put(grammarAccess.getEqualityAccess().getRightAssignment_1_2(), "rule__Equality__RightAssignment_1_2");
			builder.put(grammarAccess.getBoolExpAccess().getOpAssignment_1_1(), "rule__BoolExp__OpAssignment_1_1");
			builder.put(grammarAccess.getBoolExpAccess().getRightAssignment_1_2(), "rule__BoolExp__RightAssignment_1_2");
			builder.put(grammarAccess.getPrimaryAccess().getValueAssignment_0_1(), "rule__Primary__ValueAssignment_0_1");
			builder.put(grammarAccess.getPrimaryAccess().getValueAssignment_1_1(), "rule__Primary__ValueAssignment_1_1");
			builder.put(grammarAccess.getPrimaryAccess().getVariableAssignment_2_1(), "rule__Primary__VariableAssignment_2_1");
			builder.put(grammarAccess.getPrimaryAccess().getExpAssignment_3_2(), "rule__Primary__ExpAssignment_3_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private StateMachineGrammarAccess grammarAccess;

	@Override
	protected InternalStateMachineParser createParser() {
		InternalStateMachineParser result = new InternalStateMachineParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public StateMachineGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(StateMachineGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
